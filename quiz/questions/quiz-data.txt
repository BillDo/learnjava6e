00-ti Learning Java, 6e
00-in This application presents a series of review questions taking from  Learning Java, 6e, by Marc Loy, Patrick Niemeyer, and Daniel Leuck. The questions have been adapted slightly to support multiple choice. Feel free to bounce around. You can come back to any chapter at any time. And don't be afraid to get an answer wrong. We try to provide useful feedback on both the correct and incorrect answers. They say you can learn a lot from your mistakes and we hope that's true in this review!

###
# Chapter 1, 3 questions
###
10-tx A Modern Language
10-in This chapter introduces Java and its history and ecosystem. Knowledge of where Java came from and how its future will be managed helps ground you for the exploration to come.

11-tx Which company currently maintains Java?
11-se (Select one)
11Atw Sun Microsystems
11Aex While Java was developed in the 90s at Sun Microsystems, Oracle purchased Sun (and thus Java) in 2009.
11Btc Oracle Corporation
11Bex Oracle maintains ownership and is an active partner in the development and distribution of its own commercial JDK and the open source OpenJDK.
11Ctw Microsoft
11Cex Microsoft certainly has ties to (and lawsuits about) Java, but they do not manage its development. 
11Dtw Apache Foundation
11Dex The Apache Foundation and its developers continue to contribute to the Java ecosystem, but they do not maintain the language or its core modules.

12-tx What is the name of the open source development kit for Java?
12-se (Select one)
12Atw FreeJ
12Aex We made this name up, but it feels like something that might actually exist already. :)
12Btw C#
12Bex C# is the name of Microsoft's proprietary language based (heavily) on Java.
12Ctc OpenJDK
12Cex The open source version of the JDK is indeed known as the OpenJDK.
12Dtw Java Classic
12Dex Sadly this soft drink-inspired variation is something we made up.

13-tx Name the components that play a role in Java&rsquo;s approach to securely running bytecode.
13-se (Select all that apply)
13Atc The Security Manager
13Aex TODO
13Btc The Bytecode Verifier
13Bex TODO
13Ctw The Cryptography Extensions
13Cex Java can certainly handle cryptographic tasks and secure protocols such as encoding, decoding, or HTTPS, but these features are not part of its approach to bytecode security.
13Dtc The Class Loader
13Dex TODO

###
# Chapter 2, 5 questions
###
20-ti A First Application
20-in This chapter covered some simple Java code including the canonical first application, "Hello, world."

21-tx What command do you use to compile a Java source file?
21-se (Select one)
21Atc javac
21Aex If you are working in a terminal, the javac command compiles Java source files. While the details are often hidden when using an IDE like IntelliJ IDEA, the IDE is also using javac behind the scenes.
21Btw javap
21Bex The javap command is actually a decompiling tool. It can be useful for low-level debugging work, especially if you must debug classes you didn't create or don't have the source code for.
21Ctw java
21Cex The java command can run a compiled class, but it cannot compile the class itself.
21Dtw gcc
21Dex The GNU C Compiler (gcc) can compile a great many things (we're legitimate fans) but it does not work with Java source files.

22-tx How does the JVM know where to start when you run a Java application?
22-se (Select one)
22Atw It asks when you start the JVM
22Aex The JVM doesn't really have an interactive mode, although jshell does allow you to play with different classes. But running the java command with no arguments will simply print out an informational message on how to use the java command. :)
22Btw All applications written in Java must include a class named StartHere.
22Bex While such a self-explanatory class name seems an easy way to go, Java does not look for any particular class when starting.
22Ctw Java does not have a way to run classes. You have to use a browser.
22Cex Happily this is not the case. Java used to have applets that would execute in a browser, and all modern browsers support JavaScript--which feels kinda like Java--but a browser is not how you run Java code.
22Dtc The class you specify after the java command must include a main() method.
22Dex Any executable Java class must have a ++main()++ method defined. The JVM uses this method as the entry point. The name of the class does not play a role in startup.

23-tx Can you extend more than one class when creating a new class?
23-se (Select the best match)
23Atw Yes. All object-oriented languages, including Java, allow multiple inheritence.
23Aex Not really. Many OO languages do support multiple inheritence, but Java does not.
23Btc No. Java does not support direct multiple inheritence from multiple, separate classes.
23Bex Java only supports direct inheritence from one class. Java has other features, like interfaces, which provide many of the benefits of multiple inheritence.
23Ctw No. Java does not support inheritence at all.
23Cex No inheritence at all would make Java a very different language! Java does support single inheritence.
23Dtw Yes, but only if the extended classes are included in the same source file.
23Dex While you can imagine such a limitation on what can be used in multiple inheritence might work, Java does not support even limited multiple inheritence.

24-tx Can you implement more than one interface when creating a new class?
24-se (Select the best match)
24Atw No. Similar to extending classes, Java only allows you to implement one interface at a time.
24Aex Java does allow you to implement multiple interfaces. This is the primary means of mimicking the multiple inheritence found in some other object-oriented languages.
24Btw No. Interfaces and classes are separate and incompatible.
24Bex As classes are Java's primary unit of organization, it would be quite a problem if interfaces were incompatible! You implement interfaces for a class and you can implement several if necessary. 
24Ctc Yes. Java allows you to implement as many interfaces as needed.
24Cex Using interfaces provides programmers with most of the useful features of multiple inheritence without many of the pitfalls.
24Dtw Sort of. Java allows you to implement at most two interfaces in a given class.
24Dex Happily Java does not have any such limitation. You can implement as many interfaces as makes sense.

25-tx Which class represents the window in a graphical application?
25-se (Select one)
25Atc JFrame
25Aex The JFrame class represents the main window used in Java graphical applications, although later chapters will introduce you to some lower-level classes that can also create specialized windows.
25Btw StartHere
25Bex While you might create a graphical application with a main() method in a class you called StartHere, that class is not part of the Java core.
25Ctw JSwing
25Cex Fun name for a class, but it's not part of Java's classes.
25Dtw JComponent
25Dex While JComponent is a parent to several classes used in graphical interfaces, it does not represent the main window of an application.


###
# Chapter 3
###
30-ti Tools of the Trade
30-in There are several applications and utilities that go into day-to-day Java development. Many folks tuck these utilities out of the way behind integrated development enviroments (IDEs) such as IntelliJ IDEA from JetBrains. You can also work with these utilities directly on the command line. This chapter looks at both approaches as you get ready to become a productive coder.

31-tx What options do you use to look at the contents of a JAR file without unpacking it?
31-se (Select one)
31Atw jar xf MyApp.jar
31Aex The x flag in "xf" is used for extracting the contents of a JAR or ZIP file.
31Btw jar cvf MyApp.jar
31Bex The c flag in "cvf" is used for creating new JAR and ZIP files.
31Ctw jar f MyApp.jar
31Cex The f flag on its own is insufficient. The jar command needs at least one other flag to know what you need done with the supplied file.
31Dtc jar tvf MyApp.jar
31Dex The tvf flags represent the "table of contents" (t), "verbose" (v), and "file" (f flag followed by a filename). This will show you everything in the file without actually extracting it.

32-tx What flags allow you to compile a Java program that includes preview feature code?
32-se (Select one)
32Atw --enable-preview
32Aex The --enable-preview flag is sufficient when running a Java application that contains preview features, but it is not enough when compiling.
32Btc --enable-preview and --release
32Bex When compiling a Java class that relies on a preview feature, you must supply the --enable-preview and either the -source or --release flags to javac.
32Ctw --extras and -source
32Cex The -source flag can play a roll in compiling preview feature code, but --extras is not a valid option to javac.
32Dtw --new-features
32Dex Sure seems like this would do the trick, but --new-features is not a valid option to javac.

33-tx What flags allow you to run a Java program that includes preview feature code?
33-se (Select one)
33Atc --enable-preview
33Aex When running a compile class that includes a preview feature, you only need to supply the --enable-preview flag.
33Btw --new-features
33Bex Sure seems like this would do the trick, but --new-features is not a valid option to java.
33Ctw --release
33Cex This flag is used when compiling and cannot be used to enable preview features when running an app with the java command.
33Dtw --version
33Dex While this is a valid flag to the java command, it simply prints the JDK version information to the screen.

34-tx What entry is required in the MANIFEST.MF file to make a JAR file executable?
34-se (Select one)
34Atc Main-Class
34Aex You must include an entry for Main-Class that gives the fully-qualified name of a class with a valid main() method to make a given JAR file executable.
34Btw Created-By
34Bex This entry typically indicates the version and vendor of Java used to create the JAR file.
34Ctw Class-Path
34Cex This entry can specify the location of extra classes or libraries that your application needs to run. It does not affect the executable nature of the JAR file.
34Dtw Nothing extra is required
34Dex While nothing extra is required to create a valid JAR file that will be used as a library, the default manifest file is not sufficient to create an executable JAR file.

35-tx What tool allows you to try out Java code in an interactive fashion?
35-se (Select one)
35Atw java
35Aex You use the java command to run a compiled application from classes or a JAR file.
35Btw javac
35Bex The javac command is used to compile Java source files into bytecode.
35Ctc jshell
35Cex You can run jshell from a terminal to try simple Java code interactively.
35Dtw jar
35Dex The jar utility can create and unpack JAR files, but it does provide any interactive behaviors.

###
# Chapter 4
###
40-ti The Java Language
40-in Java picked up several syntax and grammar designs from other languages and added a few features of its own. This chapter covers that control structures and other language elements that go into your day-to-day use when writing Java source code.

41-tx What text encoding format is used by default by Java in compiled classes?
41-se (Select one)
41Atw ASCII
41Aex While popular and common in Western and English-speaking countries, ASCII is too limited to encode the characters of some languages and special glyphs such as emoji characters.
41Btw ISO-8859-1
41Bex This encoding handles "Latin" characters nicely but is otherwise limited. It is not the default used by Java, but legacy text files may still use it.
41Ctc UTF-8
41Cex By default, Java uses the 8-bit Unicode Transformation Format (UTF-8) encoding. This encoding enjoys wide usage online. The 8-bit (or one byte) encoding can accommodate both single and multibyte characters.
41Dtw UTF-16
41Dex The 16-bit UTF encoding is used by Java to store strings internally, but it is not the default encoding for file operations or other input/output tasks.

42-tx What characters are used to enclose a multiline comment? Can those comments be nested?
42-se (Select one)
42Atc /* */ -- these cannot be nested
42Aex Java borrows from C and C++ for its comment syntax. Single line comments begin with two slashes (//) while multiline comments are enclosed in /* and */ pairs. The multiline style can also be used to embed small comments in the middle of a line of code, but they cannot be nested.
42Btw // -- these cannot be nested
42Bex The double-slash creates a one-line comment in Java; it does handle multiple lines. (Although you can certainly comment out several lines in a row by using // at the beginning of each line.)
42Ctw // -- these can be nested
42Cex The double-slash creates a one-line comment in Java. You can technically "nest" these comments in that you are not restricted from using another double-slash on the commented line, but nesting is not really something you think about on a single line of source code.
42Dtw # -- these can be nested
42Dex The hash sign (#, or pound sign, or hashtag) is a popular one-line comment character for many languages and shells, but it is not used by Java.

43-tx Which looping constructs does Java support?
43-se (Select all that apply)
43Atc for (standard)
43Aex Java supports the classic for loop which is good for counting or traversing a range.
43Btc for (enhanced)
43Bex Java supports an enhanced for loop which is good for iterating over collections.
43Ctc while
43Cex Java supports while loops which are good for any condition-based repetition.
43Dtc do (sometimes called do/while)
43Dex Java supports do/while loops which are good for condition-based repetition where you also need to guarantee at least one run of the loop.

44-tx In a chain of if/else if/else tests, what happens if multiple conditions are true?
44-se (Select one)
44Atw Every block with a condition that evaluates to true gets executed
44Aex Multiple matches are definitely possible, but if/else if/else chains only execute one block.
44Btc The block associated with the first test that evaluates to true will be executed
44Bex The block with the first true condition will be executed. After that block completes, control resumes after the entire chain--regardless of how many other tests would have also returned true.
44Ctw The block associated with the last test that evaluates to true will be executed
44Cex While a reasonable guess, Java will stop evaluating conditions in a chain after one true condition has been found.
44Dtw The block that gets executed is essentially chosen at random. Overlapping conditions should be avoided
44Dex Happily this is not the case. These if/else if/else chains appear in many languages and all of them have well-defined behavior.

45-tx If you wanted to store the US stock market's total capitalization (roughly $31 trillion at the close of fiscal year 2022) as whole dollars, what primitive data type could you use?
45-se (Select one)
45Atw double
45Aex While the double type could be used, as the numbers get larger, their precision falls off.
45Btw int
45Bex The int type is too small, with a maximum of roughly 2.4 billion.
45Ctw String
45Cex The String "type" is not a primitive type in Java, it is an object type. You could, however, still use it to store the correct numeric characters of the huge number. You just couldn't do any math with that representation.
45Dtc long
45Dex You could use the long integer type, it can store numbers up to 9 quintillion (positive or negative).  And since "whole dollars" implies no fractions, an integer type makes more sense.

46-tx Given the expression: 18 - 7 * 2, what will it evaluate to?
46-se (Select one)
46Atc Answer A
46Aex This is an order-of-precedence question. The multiplication of 7 and 2 will occur first, then the subtraction. The final answer is 4.
46Btw 22
46Bex This answer probably came from performing the operations left-to-right. If you actually want that result, you could enclose the "18 - 7" portion inside parentheses (just like this aside).
46Ctw 1872
46Cex What a fun (if wrong) answer--just concatenate all the numbers! Happily Java actually does the math for us.
46Dtw 29
46Dex If you go "outside in" you could multiply 18 by 2 and then subtract 7, but that would make for very very messy expressions and is not how Java evaluates such things.

47-tx How might you create and initialize an array holding the names of the days of the week?
47-se (Select the best option)
47Atw Just use the built-in String.weekdays array
47Aex The String class does not have any such predefined array--but it's a fun idea!
47Btw String weekdays[7];
47Bex While this declaration would correctly make room to store seven names, it does not complete the job.
47Ctw char[] weekdays = "SunMonTueWedThuFriSat";
47Cex Java stores names as String objects, so the char type isn't well suited to this task. Java also does not support initializing character arrays from a String.
47Dtc String weekdays[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
47Dex You can create and initialize an array using curly braces.

###
# Chapter 5
###
50-ti Chapter 5 Title
50-in Chapter 5 Intro

51-tx Question 1 text
51-se (Select one)
51Atc Answer A
51Aex Explanation A
51Btc Answer B
51Bex Explanation B
51Ctc Answer C
51Cex Explanation C
51Dtc Answer D
51Dex Explanation D

52-tx Question 2 text
52-se (Select one)
52Atc Answer A
52Aex Explanation A
52Btc Answer B
52Bex Explanation B
52Ctc Answer C
52Cex Explanation C
52Dtc Answer D
52Dex Explanation D

53-tx Question 3 text
53-se (Select one)
53Atc Answer A
53Aex Explanation A
53Btc Answer B
53Bex Explanation B
53Ctc Answer C
53Cex Explanation C
53Dtc Answer D
53Dex Explanation D

54-tx Question 4 text
54-se (Select one)
54Atc Answer A
54Aex Explanation A
54Btc Answer B
54Bex Explanation B
54Ctc Answer C
54Cex Explanation C
54Dtc Answer D
54Dex Explanation D

55-tx Question 5 text
55-se (Select one)
55Atc Answer A
55Aex Explanation A
55Btc Answer B
55Bex Explanation B
55Ctc Answer C
55Cex Explanation C
55Dtc Answer D
55Dex Explanation D

56-tx Question 6 text
56-se (Select one)
56Atc Answer A
56Aex Explanation A
56Btc Answer B
56Bex Explanation B
56Ctc Answer C
56Cex Explanation C
56Dtc Answer D
56Dex Explanation D

57-tx Question 7 text
57-se (Select one)
57Atc Answer A
57Aex Explanation A
57Btc Answer B
57Bex Explanation B
57Ctc Answer C
57Cex Explanation C
57Dtc Answer D
57Dex Explanation D

58-tx Question 8 text
58-se (Select one)
58Atc Answer A
58Aex Explanation A
58Btc Answer B
58Bex Explanation B
58Ctc Answer C
58Cex Explanation C
58Dtc Answer D
58Dex Explanation D

59-tx Question 9 text
59-se (Select one)
59Atc Answer A
59Aex Explanation A
59Btc Answer B
59Bex Explanation B
59Ctc Answer C
59Cex Explanation C
59Dtc Answer D
59Dex Explanation D

###
# Chapter 6
###
60-ti Chapter 6 Title
60-in Chapter 6 Intro

61-tx Question 1 text
61-se (Select one)
61Atc Answer A
61Aex Explanation A
61Btc Answer B
61Bex Explanation B
61Ctc Answer C
61Cex Explanation C
61Dtc Answer D
61Dex Explanation D

62-tx Question 2 text
62-se (Select one)
62Atc Answer A
62Aex Explanation A
62Btc Answer B
62Bex Explanation B
62Ctc Answer C
62Cex Explanation C
62Dtc Answer D
62Dex Explanation D

63-tx Question 3 text
63-se (Select one)
63Atc Answer A
63Aex Explanation A
63Btc Answer B
63Bex Explanation B
63Ctc Answer C
63Cex Explanation C
63Dtc Answer D
63Dex Explanation D

64-tx Question 4 text
64-se (Select one)
64Atc Answer A
64Aex Explanation A
64Btc Answer B
64Bex Explanation B
64Ctc Answer C
64Cex Explanation C
64Dtc Answer D
64Dex Explanation D

65-tx Question 5 text
65-se (Select one)
65Atc Answer A
65Aex Explanation A
65Btc Answer B
65Bex Explanation B
65Ctc Answer C
65Cex Explanation C
65Dtc Answer D
65Dex Explanation D

66-tx Question 6 text
66-se (Select one)
66Atc Answer A
66Aex Explanation A
66Btc Answer B
66Bex Explanation B
66Ctc Answer C
66Cex Explanation C
66Dtc Answer D
66Dex Explanation D

###
# Chapter 7
###
70-ti Chapter 7 Title
70-in Chapter 7 Intro

71-tx Question 1 text
71-se (Select one)
71Atc Answer A
71Aex Explanation A
71Btc Answer B
71Bex Explanation B
71Ctc Answer C
71Cex Explanation C
71Dtc Answer D
71Dex Explanation D

72-tx Question 2 text
72-se (Select one)
72Atc Answer A
72Aex Explanation A
72Btc Answer B
72Bex Explanation B
72Ctc Answer C
72Cex Explanation C
72Dtc Answer D
72Dex Explanation D

73-tx Question 3 text
73-se (Select one)
73Atc Answer A
73Aex Explanation A
73Btc Answer B
73Bex Explanation B
73Ctc Answer C
73Cex Explanation C
73Dtc Answer D
73Dex Explanation D

74-tx Question 4 text
74-se (Select one)
74Atc Answer A
74Aex Explanation A
74Btc Answer B
74Bex Explanation B
74Ctc Answer C
74Cex Explanation C
74Dtc Answer D
74Dex Explanation D

75-tx Question 5 text
75-se (Select one)
75Atc Answer A
75Aex Explanation A
75Btc Answer B
75Bex Explanation B
75Ctc Answer C
75Cex Explanation C
75Dtc Answer D
75Dex Explanation D

###
# Chapter 8
###
80-ti Chapter 8 Title
80-in Chapter 8 Intro

81-tx Question 1 text
81-se (Select one)
81Atc Answer A
81Aex Explanation A
81Btc Answer B
81Bex Explanation B
81Ctc Answer C
81Cex Explanation C
81Dtc Answer D
81Dex Explanation D

82-tx Question 2 text
82-se (Select one)
82Atc Answer A
82Aex Explanation A
82Btc Answer B
82Bex Explanation B
82Ctc Answer C
82Cex Explanation C
82Dtc Answer D
82Dex Explanation D

83-tx Question 3 text
83-se (Select one)
83Atc Answer A
83Aex Explanation A
83Btc Answer B
83Bex Explanation B
83Ctc Answer C
83Cex Explanation C
83Dtc Answer D
83Dex Explanation D

84-tx Question 4 text
84-se (Select one)
84Atc Answer A
84Aex Explanation A
84Btc Answer B
84Bex Explanation B
84Ctc Answer C
84Cex Explanation C
84Dtc Answer D
84Dex Explanation D

85-tx Question 5 text
85-se (Select one)
85Atc Answer A
85Aex Explanation A
85Btc Answer B
85Bex Explanation B
85Ctc Answer C
85Cex Explanation C
85Dtc Answer D
85Dex Explanation D

86-tx Question 6 text
86-se (Select one)
86Atc Answer A
86Aex Explanation A
86Btc Answer B
86Bex Explanation B
86Ctc Answer C
86Cex Explanation C
86Dtc Answer D
86Dex Explanation D

87-tx Question 7 text
87-se (Select one)
87Atc Answer A
87Aex Explanation A
87Btc Answer B
87Bex Explanation B
87Ctc Answer C
87Cex Explanation C
87Dtc Answer D
87Dex Explanation D


