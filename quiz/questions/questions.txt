###
# Chapter 5
###
Objects in Java

. What is the primary organizing unit in Java?
+
The main &ldquo;unit&rdquo; in Java is a class. Many other structures play important roles, of course, but you can&rdquo;t put any of those other things to use with at least one class.

. What operator do you use to create an object (or instance) from a class?
+
The ++new++ operator instantiates an object and calls the appropriate constructor for a class.

. Java does not support classic multiple inheritance. What mechanisms does Java provide as alternatives?
+
Java uses interfaces to accomplish most of the goals of multiple inheritance found in many other object-oriented languages.

. How can you organize multiple, related classes?
+
You place related classes in a package. In your filesystem, a package appears as nested folders. In your code, packages use dot-separated names.

. How do you include classes from other packages for use in your own code?
+
You can ++import++ other individual classes or entire packages for you own use.

. What do you call a class defined inside the scope of another class? What are some features that make such a class useful in some circumstances?
+
A simple class defined within the curly braces of another class (not just in the same file) is called an inner class. Inner classes have access to all the variables and methods of the outer class&mdash;including private members. They can be used to help break up your code into manageable and reusable pieces while providing good control over who else can use them.

. What do you call a method designed to be overridden that has a name, return type, and argument list, but no body?
+
Methods defined with only their signatures are known as abstract methods. Including an abstract method in a class makes the class abstract as well. The abstract class cannot be instantiated. You must create a subclass and then provide a real body for the method to use it.

. What is an overloaded method?
+
Java allows you to use the same method name with different types or numbers of arguments. If two methods share the same name, they are said to be overloaded. Overloading makes it possible to create a batch of methods that do the same logical work on disparate arguments. The classic example of an overloaded method in Java is ++System.out.println()++ which can take several different types of arguments and convert them all to strings for printing to a terminal.

. If you want to make sure no other class can use a variable you have defined, what access modifier should you use?
+ The ++private++ access modifier for a variable (or a method, or indeed an entire inner class) restricts its use to the class where it is defined.

###
# Chapter 6
###

Error Handling and Logging

. What statement do you use to guard against potential exceptions in your code?
+
You can use a ++try/catch++ block around any statement or group of statements that might generate an exception.

. Which exceptions does the compiler require you to handle or throw?
+
In Java, the term &ldquo;checked exception&rdquo; refers to a category of exceptions that the compiler understands and requires the programmer to acknowledge. You can use a ++try/catch++ block within a method where checked exceptions might occur, or you can add the exception to the method&rsquo;s ++throws++ clause in its signature.

. Where do you place any clean up code that you always want to run after using some resources in a ++try++ block?
+
The ++finally++ clause will run at the end of a ++try++ block regardless of what happens. If there are no problems, the code in the ++finally++ clause runs. If there is an exception and a ++catch++ block handles it, ++finally++ still runs. If an exception occurs that is not handled, the ++finally++ clause still runs before control is transferred back to the calling method.

. Do assertions have much of a performance penalty when they are disabled?
+
No. This is by design. Assertions are meant to be used more during development or debugging. When you turn them off, they are skipped. Even in a production application, though, you might leave assertions in your code. If a user reports a problem, assertions could be turned on temporarily to allow your user to collect any output and help you find the cause.

. When you include logging messages in your application, which level might you use to let users know that something went wrong?
+
Probably the ++WARNING++ level if what &ldquo;went wrong&rdquo; is something you can recover from and keep the application running. If you don&rsquo;t have good recovery options and the program will be terminated, you would probably use the ++SEVERE++ level.

. If you needed to send log messages for just one of your applications to another system over the network, how might you configure the Logging API? What if you wanted to log messages over the network for every application?
+
For a single application, you could create a specific properties file that you &ldquo;add&rdquo; at runtime using a command-line argument: ++-Djava.util.logging.config.file=myfile.properties++. If you have a logging configuration that works for all the applications you run, you can put your configuration in the global __jre$$/$$lib$$/$$logging.properties__ file under your JDK installation folder.

###
# Chapter 7
###
Collections and Generics

. If you want to store a contact list with names and phone numbers, which kind of collection would work best?
+
A ++Map++ would do the trick. The keys could be simple strings containing the contact&rsquo;s name and the values could be a simple (though wrapped) long number. Or you could create a ++Person++ class and a ++PhoneNumber++ class and the map could use your custom classes.

. What method do you use to get an iterator for the items in a ++Set++?
+
The imaginatively named ++iterator()++ method from the ++Collection++ interface will get your iterator.

. How can you turn a ++List++ into an array?
+
You can use the ++toArray()++ method to turn a ++List++ into either an array of type ++Object++ or an array of the list&rsquo;s parameterized type.

. How can you turn an array into a ++List++?
+
The ++Arrays++ helper class includes the handy ++asList()++ method that accepts an array and returns a parameterized list of the same type.

. What interface should you implement to sort a list using the ++Collections.sort()++ method?
+
While there are many ways to sort collections, a list of ++Comparable++ objects (meaning objects whose class implements the ++Comparable++ interface) can use the standard ++sort()++ method provided by the ++Collection++ interface.

###
# Chapter 8
###
Text and Core Utilities

. Which class contains the constant &pi;? Do you need to import that class to use &pi;?
+
The ++java.lang.Math++ class contains the constant ++PI++. All of the classes in the ++java.lang++ package are imported by default; no explicit ++import++ is required to use them.

. Which package contains newer, better replacements for the original ++java.util.Date++ class?
+
The ++java.time++ package added in Java 8 contains a wide variety of quality classes for handling dates, times, timestamps (or &ldquo;instants&rdquo; consisting of both a date and a time), and time spans or durations.

. Which class do you use to format a date for user-friendly output?
+
The ++DateFormat++ class in the ++java.text++ package has a marvelously flexible (if occasionally opaque) formatting engine for rendering both dates and times.

. What symbol do you use in a regular expression to help match the words &ldquo;yes&rdquo; and &ldquo;yup&rdquo;?
+
You can use the alternation operator, ++|++ (vertical pipe), to create an expression such as ++yes|yup++ for use as a pattern.

. How would you convert the string &ldquo;42&rdquo; into the integer 42?
+
The various numeric wrappers all have string conversion methods. For an integer like 42, the ++Integer.parseInt()++ method would work. The wrapper classes are all part of the ++java.lang++ package.

. How would you compare two strings to see if they match, ignoring any capitalization, such as &ldquo;yes&rdquo; and &ldquo;YES&rdquo;?
+
The ++String++ class has two main comparison methods: ++equals()++ and ++equalsIgnoreCase()++. The latter would ignore capitalization, as its name suggests.

. Which operator allows for simple string concatenation?
+
Java does not generally support operator overloading, but the plus sign (++$$+$$++) performs addition when used with numeric base types, and concatenation when used with ++String++ objects. If you use ++$$+$$++ to &ldquo;add&rdquo; a string and a number, the result will be a string. (So ++7 + "is lucky"++ would result in the string &ldquo7is lucky&rdquo;. Notice that concatenation does not insert any white space. If you are assembling a typical sentence, you must add your own spacing between the parts.) 

